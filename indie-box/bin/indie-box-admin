#!/usr/bin/perl
#
# Central administration script for Indie Box Project administration
#
# Copyright (C) 2013 Indie Box Project http://indieboxproject.org/
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

use Getopt::Long;
use IndieBox::Host;
use IndieBox::Logging;
use IndieBox::Site;
use IndieBox::Utils qw( readJsonFromFile readJsonFromStdin );

my $quiet = 0;
my $json  = 0;
my $brief = 0;
my $help  = 0;
my $cmd;
my $file;

my $parseOk = GetOptions(
        'quiet'  => \$quiet,
        'json'   => \$json,
        'brief'  => \$brief,
        'help'   => \$help,
        'file=s' => \$file );

if( $help ) {
    synopsisHelpQuit( 1 );
}
if( !$parseOk || !@ARGV ) {
    synopsisHelpQuit();
}

if( $quiet ) {
    IndieBox::Logging::setQuiet();
}

$cmd = shift @ARGV;

if( $cmd eq 'deploy' ) {
    if( @ARGV || $json || $brief ) {
        synopsisHelpQuit();
    }
    my $json = $file ? readJsonFromFile( $file ) : readJsonFromStdin();

    my $newSites = [];
    if( ref( $json ) eq 'HASH' ) {
        push @$newSites, new IndieBox::Site( $json );
    } elsif( ref( $json ) eq 'ARRAY' ) {
        foreach my $siteJson ( @$json ) {
            push @$newSites, new IndieBox::Site( $siteJson );
        }
    }

    my $applicableRoleNames = IndieBox::Host::applicableRoleNames();

    my $oldSites = IndieBox::Host::sites();
    my $prerequisites = {};
    foreach my $site ( @$newSites ) {
        $site->addToPrerequisites( $applicableRoleNames, $prerequisites );
    }
    IndieBox::Host::installPackages( $prerequisites );

    my $suspendTriggers = {};
    foreach my $site ( @$newSites ) {
        my $oldSite = $oldSites->{$site->siteId};
        if( $oldSite ) {
            $oldSite->suspend( $suspendTriggers ); # replace with "upgrade in progress page"
        } else {
            $site->setupPlaceholder( $suspendTriggers ); # show "coming soon"
        }
    }
    IndieBox::Host::executeTriggers( $suspendTriggers );

    foreach my $site ( @$newSites ) {
        my $oldSite = $oldSites->{$site->siteId};
        if( $oldSite ) {
            $oldSite->undeploy();
        }
        $site->deploy();
    }

    my $resumeTriggers = {};
    foreach my $site ( @$newSites ) {
        $site->resume( $resumeTriggers ); # remove "upgrade in progress page"
    }
    IndieBox::Host::executeTriggers( $resumeTriggers );

} elsif( $cmd eq 'undeploy' ) {
    unless( @ARGV ) {
        fatal( "No sites given to undeploy." );
    }
    if( $json || $brief ) {
        synopsisHelpQuit();
    }
    my $oldSites = IndieBox::Host::sites();
    foreach my $siteId ( @ARGV ) {
        unless( $oldSites->{$siteId} ) {
            fatal( "Cannot find site with siteid $siteId. Not undeploying any site." );
        }
    }
    my $disableTriggers = {};
    foreach my $site ( values %$oldSites ) {
        $site->disable( $disableTriggers ); # replace with "404 page"
    }
    IndieBox::Host::executeTriggers( $disableTriggers );

    foreach my $siteId ( @ARGV ) {
        my $site = $oldSites->{$siteId};
        $site->undeploy();
    }

} elsif( $cmd eq 'listsites' ) {
    if( @ARGV || $quiet ) {
        synopsisHelpQuit();
    }
    my $sites = IndieBox::Host::sites();
    if( $json ) {
        my $sitesJson = {};
        foreach my $site ( values %$sites ) {
            $sitesJson->{$site->siteId} = $site->siteJson;
        }
        IndieBox::Utils::writeJsonToStdout( $sitesJson );
    } elsif( $brief ) {
        foreach my $site ( values %$sites ) {
            print $site->siteId . "\n";
        }
    } else { # human-readable
        foreach my $site ( values %$sites ) {
            print "Site: " . $site->siteId . "\n";
            print "    Hostname: " . $site->hostName . "\n";
            foreach my $appConfig ( @{$site->appConfigs} ) {
                if( $appConfig->isDefault ) {
                    my $context = $appConfig->context;
                    print "    (default) Context: " . ( $context ? $context : '(root)' ) . " : " . $appConfig->app->packageName . "\n";
                }
            }
            foreach my $appConfig ( @{$site->appConfigs} ) {
                unless( $appConfig->isDefault ) {
                    my $context = $appConfig->context;
                    print "              Context: " . ( $context ? $context : '(root)' ) . " : " . $appConfig->app->packageName . "\n";
                }
            }
        }
    }

} elsif( $cmd eq 'update' ) {
    if( @ARGV || $json || $brief ) {
        synopsisHelpQuit();
    }

    my $oldSites = IndieBox::Host::sites();

    my $suspendTriggers = {};
    foreach my $site ( values %$oldSites ) {
        $site->suspend( $suspendTriggers ); # replace with "upgrade in progress page"
    }
    IndieBox::Host::executeTriggers( $suspendTriggers );

    foreach my $site ( values %$oldSites ) {
        $site->undeploy();
    }
    IndieBox::Host::updateCode();
    foreach my $site ( values %$oldSites ) {
        $site->deploy();
    }
    my $resumeTriggers = {};
    foreach my $site ( %$oldSites ) {
        $site->resume( $resumeTriggers ); # remove "upgrade in progress page"
    }
    IndieBox::Host::executeTriggers( $resumeTriggers );

} else {
    synopsisHelpQuit();
}

#####
sub synopsisHelpQuit {
    my $long = shift;

    if( $long ) {
        print <<END;
The central administration script for the Indie Box project. It enables
(well, it will, once it is completed!) the deployment and undeployment
of web apps with a single command. For more information about the
Indie Box Project, see http://indieboxproject.org/

It may be invoked in the following ways:

END
    } else {
        print "Synopsis:\n";
    }
    print "    $0 deploy [--quiet]\n";
    if( $long ) {
        print <<END;
        Deploy or update one or more websites. This includes setting up the
        virtual host(s), installing and configuring all web applications for
        the website(s). The website configuration(s) will be provided as a JSON
        file from stdin.

END
    }
    print "    $0 deploy [--quiet] -f <site.json>\n";
    if( $long ) {
        print <<END;
        Deploy or update one or more websites. This includes setting up the
        virtual host(s), installing and configuring all web applications for
        the website(s). The website configuration(s) will be provided as JSON
        file <site.json>.

END
    }
    print "    $0 undeploy [--quiet] <siteid>...\n";
    if( $long ) {
        print <<END;
        Undeploy one or more previously deployed website(s).

END
    }
    print "    $0 listsites [--json | --brief]\n";
    if( $long ) {
        print <<END;
        Show all sites currently deployed to this device.
        --json: show them in JSON format
        --brief: only show the site ids.
        no arguments: show them in human-readable format

END
    }
    print "    $0 update [--quiet]\n";
    if( $long ) {
        print <<END;
        Update all installed code on this device. This will perform
        package updates, configuration updates, database migrations
        et al as needed.

END
    }
    print "    $0 --help\n";
    if( $long ) {
        print <<END;
        Display help text.

END
    }

    exit 0;
}

1;
